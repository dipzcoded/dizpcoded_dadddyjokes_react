{"version":3,"sources":["component/JokeSidebar.js","component/JokeItem.js","component/JokeList.js","component/Spinner.js","component/Joke.js","App.js","serviceWorker.js","index.js"],"names":["JokeSidebar","getMoreJokes","className","src","alt","onClick","JokeItem","jokeData","votes","id","style","border","joke","aria-role","aria-label","JokeList","jokes","map","j","key","Spinner","Joke","numJokesToGet","useState","JSON","parse","localStorage","getItem","setJokes","loading","setLoading","useEffect","length","getJokes","seenJokes","Set","console","log","a","axios","get","headers","Accept","res","newJoke","data","has","push","uuidv4","localJoke","setItem","stringify","jokeSort","sort","b","delta","newJokes","removeItem","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf4d1f02.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../style/JokeSidebar.css'\r\n\r\nconst JokeSidebar = ({getMoreJokes}) => {\r\n\r\n    const onClick = () => {\r\n        getMoreJokes();\r\n    }\r\n\r\n    return (\r\n        <div className=\"Jokesidebar\">\r\n                    <h1 className=\"Jokesidebar__title\"> <span>Dad</span>Jokes</h1>\r\n                    <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" alt=\"smily\" />\r\n            <button className=\"Jokesidebar__btn\" onClick={onClick}>Fetch Jokes</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeSidebar\r\n","import React from 'react'\r\nimport '../style/JokeItem.css'\r\n\r\nconst JokeItem = ({jokeData, votes}) => {\r\n\r\n\r\n  \r\n\r\n    const getColor = () => {\r\n        if(jokeData.votes >= 15)\r\n        {\r\n            return \"#4CAF50\";\r\n        }else if(jokeData.votes >= 12)\r\n        {\r\n                return \"#8BC34A\"\r\n        }\r\n        else if(jokeData.votes >= 9)\r\n        {\r\n            return \"#CDDC39\"\r\n        }\r\n        else if(jokeData.votes >= 6)\r\n        {\r\n                return \"#FFEB3B\"\r\n        }\r\n        else if(jokeData.votes >= 3){\r\n                return \"#FFC107\"\r\n        }\r\n        else if(jokeData.votes >= 0 )\r\n        {\r\n            return \"#FF9800\"\r\n        }else {\r\n            return \"#F44336\"\r\n        }\r\n    }\r\n\r\n    const getEmoji = () => {\r\n\r\n        if(jokeData.votes >=  15)\r\n        {\r\n            return \"em em-rolling_on_the_floor_laughing\"\r\n        }\r\n        else if(jokeData.votes >= 12)\r\n        {\r\n            return \"em em-laughing\"\r\n        }\r\n        else if(jokeData.votes >= 9)\r\n        {\r\n            return \"em em-smiley\"\r\n        }else if(jokeData.votes >= 6)\r\n        {\r\n            return   \"em em-slightly_smiling_face\"\r\n        }\r\n        else if(jokeData.votes >= 3)\r\n        {\r\n            return    \"em em-neutral_face\"\r\n        }else if(jokeData.votes >= 0)\r\n        {\r\n            return   \"em em-confused\"\r\n        }\r\n        else\r\n        {\r\n            return  \"em em-angry\"\r\n        }\r\n    }\r\n\r\n    const upVote = () => {\r\n        votes(jokeData.id, 1)\r\n    }\r\n\r\n    const downVote = () => {\r\n        votes(jokeData.id, -1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"JokeItem\">\r\n           <div className=\"JokeItem__btn\">\r\n               <i className=\"fas fa-arrow-up\" onClick={upVote}></i>\r\n    <span className=\"JokeItem__votes\" style={{\r\n        border : `3px solid ${getColor()}`\r\n    }}>{jokeData.votes}</span>\r\n               <i className=\"fas fa-arrow-down\" onClick={downVote}></i>\r\n           </div>\r\n           <div className=\"JokeItem__text\">\r\n               {jokeData.joke}\r\n           </div>\r\n           <div className=\"JokeItem__smily\">\r\n           <i className={`${getEmoji()}`} aria-role=\"presentation\" aria-label=\"BIRD\" ></i>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeItem\r\n","import React, {Fragment} from 'react'\r\nimport '../style/JokeList.css'\r\nimport JokeItem from './JokeItem';\r\n\r\nconst JokeList = ({jokes, votes}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"Joke__list\">\r\n             {jokes.map((j) => (\r\n                 <JokeItem  key={j.id} jokeData={j} votes={votes}  />\r\n             ))}\r\n         </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default JokeList\r\n","import React, {Fragment} from 'react'\r\nimport \"../style/Joke.css\"\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <Fragment>\r\n             <div className=\"Joke__spinner\">\r\n                <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n                <h1 className=\"Joke__title\">loading.....</h1>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, {useEffect, useState, Fragment} from 'react'\r\nimport axios from 'axios';\r\nimport JokeSidebar from './JokeSidebar'\r\nimport JokeList from './JokeList';\r\nimport Spinner from './Spinner';\r\nimport '../style/Joke.css'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Joke = ({numJokesToGet}) => {\r\n\r\n    const [jokeData,setJokes] = useState( JSON.parse(localStorage.getItem(\"jokes\")) || []);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n      if(jokeData.length === 0)\r\n      {  //    Loading the function\r\n        setLoading(!loading);\r\n       getJokes();\r\n      }\r\n\r\n    },[])\r\n\r\n    const seenJokes = new Set(jokeData.map((j) => j.joke))\r\n    console.log(seenJokes);\r\n\r\n    const getJokes = async () => {\r\n        try{\r\n        let jokes = [];\r\n        while(jokes.length < numJokesToGet)\r\n        {\r\n         let res = await axios.get(\"https://icanhazdadjoke.com/\", {headers : {\r\n            Accept : \"application/json\"\r\n        }})\r\n        let newJoke =res.data.joke\r\n        if(!seenJokes.has(newJoke))\r\n        {\r\n            jokes.push({joke : newJoke, votes:0, id:uuidv4()});\r\n        }\r\n        else\r\n        {\r\n            console.log('Founded duplicate')\r\n            console.log(newJoke);\r\n        }\r\n        }\r\n\r\n        setJokes([...jokeData,...jokes])\r\n        setLoading(loading)\r\n        if(localStorage.jokes)\r\n        {\r\n            let localJoke = [...JSON.parse(localStorage.getItem(\"jokes\")),...jokes];\r\n            localStorage.setItem(\"jokes\",JSON.stringify(localJoke))\r\n        }else\r\n        {\r\n            localStorage.setItem(\"jokes\",JSON.stringify(jokes))\r\n        }\r\n    }catch(e)\r\n    {\r\n            setLoading(loading)\r\n    }\r\n        \r\n       }\r\n\r\n    // handling votes\r\n    const handleVote = (id, delta) =>\r\n    {\r\n        let newJokes = jokeData.map(j => j.id === id ? {...j, votes:j.votes + delta} : j);\r\n        setJokes(newJokes)\r\n        if(localStorage.jokes)\r\n        {\r\n            localStorage.removeItem(\"jokes\")\r\n        }\r\n        localStorage.setItem(\"jokes\",JSON.stringify(newJokes));\r\n    }\r\n\r\n    const getMoreJokes = () => {\r\n        setLoading(!loading)\r\n        getJokes();\r\n    }\r\n\r\n    let jokeSort = jokeData.sort((a,b) => b.votes - a.votes)\r\n\r\n    return (\r\n        <div className=\"Joke\">\r\n            \r\n            {loading ? (<Spinner />) : ( <Fragment>\r\n                <JokeSidebar getMoreJokes={getMoreJokes} />\r\n                <JokeList jokes={jokeSort} votes={handleVote} />\r\n            </Fragment>  ) }  \r\n        </div>\r\n    )\r\n}\r\n\r\nJoke.defaultProps = {\r\n    numJokesToGet : 10\r\n}\r\n\r\nexport default Joke\r\n","import React from 'react';\nimport './App.css';\nimport Joke from './component/Joke';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Joke />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}